## Implement MAC in chisel

class MAC extends Module {
  val io = IO(new Bundle {
    val in_a = Input(UInt(4.W))
    val in_b = Input(UInt(4.W))
    val in_c = Input(UInt(4.W))
    val out  = Output(UInt(8.W))
  })

  io.out := (io.in_a * io.in_b) + io.in_c
    
}
println(getVerilog(new MAC))
class MACTester(c: MAC) extends PeekPokeTester(c) {
  val cycles = 100
  import scala.util.Random
  for (i <- 0 until cycles) {
    val in_a = Random.nextInt(16)
    val in_b = Random.nextInt(16)
    val in_c = Random.nextInt(16)
    poke(c.io.in_a, in_a)
    poke(c.io.in_b, in_b)
    poke(c.io.in_c, in_c)
    expect(c.io.out, in_a*in_b+in_c)
  }
}
assert(Driver(() => new MAC) {c => new MACTester(c)})
println("SUCCESS!!")

## Implement Arbiter in chisel
## The following circuit arbitrates data coming from a FIFO into two parallel processing units. The FIFO and processing 
   elements (PEs) communicate with ready-valid interfaces. Construct the arbiter to send data to whichever PE is ready to 
   receive data, prioritizing PE0 if both are ready to receive data. Remember that the arbiter should tell the FIFO that it's 
   ready to receive data when at least one of the PEs can receive data. Also, wait for a PE to assert that it's ready before 
   asserting that the data are valid. You will likely need binary operators to complete this exercise.
  
class Arbiter extends Module {
  val io = IO(new Bundle { // FIFO 
  val fifo_valid = Input(Bool() 
  val fifo_ready = Output(Bool()) 
  val fifo_data = Input(UInt(16.W))

  // PE0
  val pe0_valid  = Output(Bool())
  val pe0_ready  = Input(Bool())
  val pe0_data   = Output(UInt(16.W))

  // PE1
  val pe1_valid  = Output(Bool()) 
  val pe1_ready  = Input(Bool())
  val pe1_data   = Output(UInt(16.W))
 })

io.fifo_ready := io.pe0_ready || io.pe1_ready 
io.pe0_valid := io.fifo_valid && io.pe0_ready 
io.pe1_valid := io.fifo_valid && io.pe1_ready && !io_pe0_valid 
io.pe0_data := io.fifo_data 
io.pe1_data := io.fifo_data

} 

class ArbiterTester(c: Arbiter) extends PeekPokeTester(c) { 
import scala.util.Random 
val data = Random.nextInt(65536) 
poke(c.io.fifo_data, data)

for (i <- 0 until 8) { 
poke(c.io.fifo_valid, (i>>0)%2) 
poke(c.io.pe0_ready, (i>>1)%2) 
poke(c.io.pe1_ready, (i>>2)%2)

expect(c.io.fifo_ready, i>1)
expect(c.io.pe0_valid,  i==3 || i==7)
expect(c.io.pe1_valid,  i==5)

if (i == 3 || i ==7) {
  expect(c.io.pe0_data, data)
} else if (i == 5) {
  expect(c.io.pe1_data, data)
}
} } 
assert(Driver(() => new Arbiter) {
c => new ArbiterTester(c)}) 
println("SUCCESS!!")

